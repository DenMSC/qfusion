/*
Copyright (C) 2011 Victor Luchits

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

*/

#define FTABLE_SIZE_POW 12
#define FTABLE_SIZE ( 1 << FTABLE_SIZE_POW )
#define FTABLE_CLAMP( x ) ( ( (int)( ( x ) * FTABLE_SIZE ) & ( FTABLE_SIZE - 1 ) ) )
#define FTABLE_EVALUATE( table, x ) ( ( table )[FTABLE_CLAMP( fmod( x, 1.0 ) )] )

#define DRAWFLAT() ( ( rb.currentModelType == mod_brush ) && ( rb.renderFlags & RF_DRAWFLAT ) && !( rb.currentShader->flags & SHADER_NODRAWFLAT ) )

enum {
	BUILTIN_GLSLPASS_OUTLINE,
	MAX_BUILTIN_GLSLPASSES,
};

static float rb_sintable[FTABLE_SIZE];
static float rb_triangletable[FTABLE_SIZE];
static float rb_squaretable[FTABLE_SIZE];
static float rb_sawtoothtable[FTABLE_SIZE];
static float rb_inversesawtoothtable[FTABLE_SIZE];

static shaderpass_t r_GLSLpasses[MAX_BUILTIN_GLSLPASSES];

static int RB_GetShaderpassState( int state );

static void RB_RenderMeshGLSL_Outline( const shaderpass_t *pass, r_glslfeat_t programFeatures );
static void RB_RenderMeshGLSL_Q3AShader( const shaderpass_t *pass, r_glslfeat_t programFeatures );

/*
* RB_InitShading
*/
void RB_InitShading( void ) {
	int i;
	float t;

	// build lookup tables
	for( i = 0; i < FTABLE_SIZE; i++ ) {
		t = (float)i / (float)FTABLE_SIZE;

		rb_sintable[i] = sin( t * M_TWOPI );

		if( t < 0.25 ) {
			rb_triangletable[i] = t * 4.0;
		} else if( t < 0.75 ) {
			rb_triangletable[i] = 2 - 4.0 * t;
		} else {
			rb_triangletable[i] = ( t - 0.75 ) * 4.0 - 1.0;
		}

		if( t < 0.5 ) {
			rb_squaretable[i] = 1.0f;
		} else {
			rb_squaretable[i] = -1.0f;
		}

		rb_sawtoothtable[i] = t;
		rb_inversesawtoothtable[i] = 1.0 - t;
	}

	RB_InitBuiltinPasses();
}

/*
* RB_FastSin
*/
static inline float RB_FastSin( float t ) {
	return FTABLE_EVALUATE( rb_sintable, t );
}

/*
* RB_TableForFunc
*/
static float *RB_TableForFunc( unsigned int func ) {
	switch( func ) {
		case SHADER_FUNC_SIN:
			return rb_sintable;
		case SHADER_FUNC_TRIANGLE:
			return rb_triangletable;
		case SHADER_FUNC_SQUARE:
			return rb_squaretable;
		case SHADER_FUNC_SAWTOOTH:
			return rb_sawtoothtable;
		case SHADER_FUNC_INVERSESAWTOOTH:
			return rb_inversesawtoothtable;
		default:
			break;
	}

	return rb_sintable;  // default to sintable
}

/*
* RB_ApplyTCMods
*/
void RB_ApplyTCMods( const shaderpass_t *pass, mat4_t result ) {
	unsigned i;
	const float *table;
	double t1, t2, sint, cost;
	mat4_t m1, m2;
	const tcmod_t *tcmod;

	for( i = 0, tcmod = pass->tcmods; i < pass->numtcmods; i++, tcmod++ ) {
		switch( tcmod->type ) {
			case TC_MOD_ROTATE:
				cost = tcmod->args[0] * rb.currentShaderTime;
				sint = RB_FastSin( cost );
				cost = RB_FastSin( cost + 0.25 );
				m2[0] =  cost, m2[1] = sint, m2[12] =  0.5f * ( sint - cost + 1 );
				m2[4] = -sint, m2[5] = cost, m2[13] = -0.5f * ( sint + cost - 1 );
				Matrix4_Copy2D( result, m1 );
				Matrix4_Multiply2D( m2, m1, result );
				break;
			case TC_MOD_SCALE:
				Matrix4_Scale2D( result, tcmod->args[0], tcmod->args[1] );
				break;
			case TC_MOD_TURB:
				t1 = ( 1.0 / 4.0 );
				t2 = tcmod->args[2] + rb.currentShaderTime * tcmod->args[3];
				Matrix4_Scale2D( result,
								 1 + ( tcmod->args[1] * RB_FastSin( t2 ) + tcmod->args[0] ) * t1,
								 1 + ( tcmod->args[1] * RB_FastSin( t2 + 0.25 ) + tcmod->args[0] ) * t1 );
				break;
			case TC_MOD_STRETCH:
				table = RB_TableForFunc( tcmod->args[0] );
				t2 = tcmod->args[3] + rb.currentShaderTime * tcmod->args[4];
				t1 = FTABLE_EVALUATE( table, t2 ) * tcmod->args[2] + tcmod->args[1];
				t1 = t1 ? 1.0f / t1 : 1.0f;
				t2 = 0.5f - 0.5f * t1;
				Matrix4_Stretch2D( result, t1, t2 );
				break;
			case TC_MOD_SCROLL:
				t1 = tcmod->args[0] * rb.currentShaderTime;
				t2 = tcmod->args[1] * rb.currentShaderTime;
				t1 = t1 - floor( t1 );
				t2 = t2 - floor( t2 );
				Matrix4_Translate2D( result, t1, t2 );
				break;
			case TC_MOD_TRANSFORM:
				m2[0] = tcmod->args[0], m2[1] = tcmod->args[2], m2[12] = tcmod->args[4],
				m2[5] = tcmod->args[1], m2[4] = tcmod->args[3], m2[13] = tcmod->args[5];
				Matrix4_Copy2D( result, m1 );
				Matrix4_Multiply2D( m2, m1, result );
				break;
			default:
				break;
		}
	}
}

/*
* RB_GetShaderpassColor
*/
void RB_GetShaderpassColor( const shaderpass_t *pass, byte_vec4_t rgba_, float *colorMod ) {
	int c;
	int rgba[4];
	double temp;
	float *table, a;
	vec3_t v;
	const shaderfunc_t *rgbgenfunc = &pass->rgbgen.func;
	const shaderfunc_t *alphagenfunc = &pass->alphagen.func;

	*colorMod = 1;
	Vector4Set( rgba, 255, 255, 255, 255 );

	switch( pass->rgbgen.type ) {
		case RGB_GEN_IDENTITY:
			break;
		case RGB_GEN_CONST:
			rgba[0] = ( int )( pass->rgbgen.args[0] * 255.0f );
			rgba[1] = ( int )( pass->rgbgen.args[1] * 255.0f );
			rgba[2] = ( int )( pass->rgbgen.args[2] * 255.0f );
			break;
		case RGB_GEN_ENTITYWAVE:
		case RGB_GEN_WAVE:
			if( rgbgenfunc->type == SHADER_FUNC_NONE ) {
				temp = 1;
			} else if( rgbgenfunc->type == SHADER_FUNC_RAMP ) {
				break;
			} else if( rgbgenfunc->args[1] == 0 ) {
				temp = rgbgenfunc->args[0];
			} else {
				table = RB_TableForFunc( rgbgenfunc->type );
				temp = rb.currentShaderTime * rgbgenfunc->args[3] + rgbgenfunc->args[2];
				temp = FTABLE_EVALUATE( table, temp ) * rgbgenfunc->args[1] + rgbgenfunc->args[0];
				temp = temp * rgbgenfunc->args[1] + rgbgenfunc->args[0];
			}

			if( pass->rgbgen.type == RGB_GEN_ENTITYWAVE ) {
				VectorSet( v,
						   rb.entityColor[0] * ( 1.0 / 255.0 ),
						   rb.entityColor[1] * ( 1.0 / 255.0 ),
						   rb.entityColor[2] * ( 1.0 / 255.0 ) );
			} else {
				VectorCopy( pass->rgbgen.args, v );
			}

			a = v[0]; rgba[0] = ( int )( a * 255.0f );
			a = v[1]; rgba[1] = ( int )( a * 255.0f );
			a = v[2]; rgba[2] = ( int )( a * 255.0f );
			*colorMod = (float)temp;
			break;
		default:
			break;
	}

	switch( pass->alphagen.type ) {
		case ALPHA_GEN_IDENTITY:
			break;
		case ALPHA_GEN_CONST:
			rgba[3] = ( int )( pass->alphagen.args[0] * 255.0f );
			break;
		case ALPHA_GEN_WAVE:
			if( !alphagenfunc || alphagenfunc->type == SHADER_FUNC_NONE ) {
				a = 1;
			} else if( alphagenfunc->type == SHADER_FUNC_RAMP ) {
				break;
			} else {
				table = RB_TableForFunc( alphagenfunc->type );
				a = alphagenfunc->args[2] + rb.currentShaderTime * alphagenfunc->args[3];
				a = FTABLE_EVALUATE( table, a );
				a = a * alphagenfunc->args[1] + alphagenfunc->args[0];
			}

			rgba[3] = ( int )( a * 255.0f );
			break;
		case ALPHA_GEN_ENTITY:
			rgba[3] = rb.entityColor[3];
			break;
		case ALPHA_GEN_OUTLINE:
			rgba[3] = rb.entityOutlineColor[3];
		default:
			break;
	}

	for( c = 0; c < 4; c++ ) {
		rgba_[c] = bound( 0, rgba[c], 255 );
	}
}

/*
* RB_UpdateCommonUniforms
*/
static void RB_UpdateCommonUniforms( int program, const shaderpass_t *pass, mat4_t texMatrix ) {
	vec3_t entDist, entOrigin;
	byte_vec4_t constColor;
	float colorMod = 1.0f;
	const entity_t *e = rb.currentEntity;
	vec3_t tmp;
	vec2_t blendMix = { 0, 0 };

	// the logic here should match R_TransformForEntity
	if( e->rtype != RT_MODEL ) {
		VectorClear( entOrigin );
		VectorCopy( rb.cameraOrigin, entDist );
	} else {
		VectorCopy( e->origin, entOrigin );
		VectorSubtract( rb.cameraOrigin, e->origin, tmp );
		Matrix3_TransformVector( e->axis, tmp, entDist );
	}

	// calculate constant color
	RB_GetShaderpassColor( pass, constColor, &colorMod );

	// apply modifications to texture coordinates
	if( pass->numtcmods ) {
		RB_ApplyTCMods( pass, texMatrix );
	}

	RP_UpdateViewUniforms( program,
		rb.objectMatrix,
		rb.modelviewMatrix, rb.modelviewProjectionMatrix,
		rb.cameraOrigin, rb.cameraAxis,
		rb.gl.viewport,
		rb.zNear, rb.zFar
	);

	if( RB_IsAlphaBlending( rb.gl.state & GLSTATE_SRCBLEND_MASK, rb.gl.state & GLSTATE_DSTBLEND_MASK ) ) {
		blendMix[1] = 1;
		if( rb.alphaHack ) {
			constColor[3] *= rb.hackedAlpha;
		}
	} else {
		blendMix[0] = 1;
		if( rb.alphaHack ) {
			constColor[0] *= rb.hackedAlpha, constColor[1] *= rb.hackedAlpha, constColor[2] *= rb.hackedAlpha;
		}
	}

	RP_UpdateShaderUniforms( program,
		rb.currentShaderTime,
		entOrigin, entDist, rb.entityColor,
		constColor,
		pass->rgbgen.func.type != SHADER_FUNC_NONE ? pass->rgbgen.func.args : pass->rgbgen.args,
		pass->alphagen.func.type != SHADER_FUNC_NONE ? pass->alphagen.func.args : pass->alphagen.args,
		texMatrix, colorMod );

	RP_UpdateBlendMixUniform( program, blendMix );

	RP_UpdateSoftParticlesUniforms( program, r_soft_particles_scale->value );

	if( rsh.worldBrushModel != NULL ) {
		RP_UpdateMapUniforms( program, rsh.worldBrushModel->fogStrength );
	}
}

/*
* RB_RenderMeshGLSL_Q3AShader
*/
static void RB_RenderMeshGLSL_Q3AShader( const shaderpass_t *pass, r_glslfeat_t programFeatures ) {
	int state;
	int program;
	int rgbgen = pass->rgbgen.type;
	const image_t *image;
	bool isWorldSurface = rb.currentModelType == mod_brush;
	bool isWorldVertexLight = false;
	bool applyLighting;
	vec3_t lightDir;
	vec4_t lightAmbient, lightDiffuse;
	mat4_t texMatrix, genVectors;
	bool noDlight = ( rb.surfFlags & SURF_NODLIGHT ) != 0;

	if( isWorldSurface ) {
		if( rb.mode == RB_MODE_DIFFUSE ) {
			return;
		}

		isWorldVertexLight = !noDlight;
	}

	// diffuse lighting for entities
	VectorSet( lightDir, 0, 0, 0 );
	Vector4Set( lightAmbient, 1, 1, 1, 1 );
	Vector4Set( lightDiffuse, 1, 1, 1, 1 );

	image = RB_ShaderpassTex( pass );
	if( rb.triangleOutlines || rb.mode == RB_MODE_DECALS ) {
		applyLighting = false;
	} else {
		applyLighting = isWorldVertexLight;
	}

	if( !applyLighting && rb.mode == RB_MODE_DIFFUSE ) {
		return;
	}
	if( applyLighting && rb.mode == RB_MODE_POST_LIGHT ) {
		return;
	}

	if( applyLighting ) {
		if( DRAWFLAT() ) {
			programFeatures |= GLSL_SHADER_COMMON_DRAWFLAT | GLSL_SHADER_COMMON_FOG;
		}
	}

	if( image->flags & IT_ALPHAMASK ) {
		programFeatures |= GLSL_SHADER_Q3_ALPHA_MASK;
	}

	// convert rgbgen and alphagen to GLSL feature defines
	programFeatures |= RB_RGBAlphaGenToProgramFeatures( &pass->rgbgen, &pass->alphagen );

	programFeatures |= RB_TcGenToProgramFeatures( pass->tcgen, pass->tcgenVec, texMatrix, genVectors );

	// set shaderpass state (blending, depthwrite, etc)
	state = pass->flags;

	if( isWorldVertexLight && !rb.doneDepthPass && !( state & GLSTATE_DEPTHWRITE ) && Shader_DepthWrite( rb.currentShader ) ) {
		if( !( pass->flags & SHADERPASS_ALPHAFUNC ) ) {
			state &= ~GLSTATE_BLEND_MASK;
		}
		state |= GLSTATE_DEPTHWRITE;
	}

	RB_SetState( RB_GetShaderpassState( state ) );

	RB_BindImage( 0, image );

	if( programFeatures & GLSL_SHADER_COMMON_SOFT_PARTICLE ) {
		RB_BindImage( 3, rb.st.screenDepthTexCopy );
	}

	RB_BindImage( 7, rsh.blueNoiseTexture );

	// update uniforms
	program = RB_RegisterProgram( GLSL_PROGRAM_TYPE_Q3A_SHADER, NULL,
								  rb.currentShader->deformsKey, rb.currentShader->deforms, rb.currentShader->numdeforms, programFeatures );
	if( RB_BindProgram( program ) ) {
		RB_UpdateCommonUniforms( program, pass, texMatrix );

		RP_UpdateTexGenUniforms( program, genVectors );

		if( isWorldSurface || rgbgen == RGB_GEN_LIGHTING_DIFFUSE ) {
			RP_UpdateDiffuseLightUniforms( program, lightDir, lightAmbient, lightDiffuse );
		}

		// submit animation data
		if( programFeatures & GLSL_SHADER_COMMON_SKINNED ) {
			RP_UpdateSkinningUniforms( program, rb.skinning_matrices );
		}

		// r_drawflat
		if( programFeatures & GLSL_SHADER_COMMON_DRAWFLAT ) {
			RP_UpdateDrawFlatUniforms( program, rsh.wallColor, rsh.floorColor );
		}

		if( programFeatures & GLSL_SHADER_COMMON_SOFT_PARTICLE ) {
			RP_UpdateTextureUniforms( program,
									  rb.st.screenDepthTex->upload_width, rb.st.screenDepthTex->upload_height );
		}

		RB_DrawElementsReal( &rb.drawElements );
	}
}

/*
* RB_RenderMeshGLSLProgrammed
*/
void RB_RenderMeshGLSLProgrammed( const shaderpass_t *pass, int programType ) {
	r_glslfeat_t features = 0;

	if( rb.greyscale || pass->flags & SHADERPASS_GREYSCALE ) {
		features |= GLSL_SHADER_COMMON_GREYSCALE;
	}

	features |= RB_BonesTransformsToProgramFeatures();
	features |= RB_AutospriteProgramFeatures();
	features |= RB_InstancedArraysProgramFeatures();
	features |= RB_AlphatestProgramFeatures( pass );
	features |= RB_sRGBProgramFeatures( pass );

	if( rb.currentShader->flags & SHADER_FOG ) {
		features |= GLSL_SHADER_COMMON_FOG;
	}

	if( ( rb.currentShader->flags & SHADER_SOFT_PARTICLE )
		&& rb.st.screenDepthTexCopy
		&& ( rb.renderFlags & RF_SOFT_PARTICLES ) ) {
		features |= GLSL_SHADER_COMMON_SOFT_PARTICLE;
	}

	switch( programType ) {
		case GLSL_PROGRAM_TYPE_OUTLINE:
			RB_RenderMeshGLSL_Outline( pass, features );
			break;
		case GLSL_PROGRAM_TYPE_Q3A_SHADER:
			RB_RenderMeshGLSL_Q3AShader( pass, features );
			break;
		case GLSL_PROGRAM_TYPE_COLOR_CORRECTION:
			RB_RenderMeshGLSL_ColorCorrection( pass, features );
			break;
		case GLSL_PROGRAM_TYPE_KAWASE_BLUR:
			RB_RenderMeshGLSL_KawaseBlur( pass, features );
			break;
		case GLSL_PROGRAM_TYPE_TEXT:
			RB_RenderMeshGLSL_Text( pass, features );
			break;
		default:
			ri.Com_DPrintf( S_COLOR_YELLOW "WARNING: Unknown GLSL program type %i\n", programType );
			return;
	}
}
